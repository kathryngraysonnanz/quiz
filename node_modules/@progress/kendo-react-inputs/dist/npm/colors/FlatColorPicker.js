"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatColorPicker = void 0;
/* eslint-disable max-len */
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var main_1 = require("../main");
var package_metadata_1 = require("../package-metadata");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("../messages");
var defaultColor = 'rgba(255, 255, 255, 1)';
;
;
/**
 * Represents the [KendoReact FlatColorPicker component]({% slug overview_flatcolorpicker %}).
 * Accepts properties of type [FlatColorPickerProps]({% slug api_inputs_flatcolorpickerprops %}). Obtaining the [FlatColorPickerHandle]({% slug api_inputs_flatcolorpickerhandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <FlatColorPicker />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.FlatColorPicker = React.forwardRef(function (props, ref) {
    (0, kendo_react_common_1.validatePackage)(package_metadata_1.packageMetadata);
    var target = React.useRef(null);
    var flatColorPickerRef = React.useRef(null);
    var colorGradientRef = React.useRef(null);
    var _a = props.defaultValue, defaultValue = _a === void 0 ? defaultColor : _a, _b = props.showButtons, showButtons = _b === void 0 ? true : _b, _c = props.showPreview, showPreview = _c === void 0 ? true : _c, _d = props.showClearButton, showClearButton = _d === void 0 ? true : _d;
    var _e = React.useState((props.view || 'ColorGradient') === 'ColorGradient'), colorGradientView = _e[0], setColorGradientView = _e[1];
    var _f = React.useState(props.value || defaultValue), colorValue = _f[0], setColorValue = _f[1];
    var _g = React.useState(props.value || defaultValue), prevColor = _g[0], setPrevColor = _g[1];
    var value = props.value !== undefined ? props.value : prevColor;
    var localizationService = (0, kendo_react_intl_1.useLocalization)();
    var focus = React.useCallback(function () {
        if (target.current) {
            target.current.focus();
        }
    }, [target]);
    React.useImperativeHandle(target, function () { return ({
        element: flatColorPickerRef.current,
        focus: focus,
        props: props,
        value: value
    }); }, [value, focus, props]);
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleViewChange = React.useCallback(function (viewType) {
        if ((viewType === 'ColorGradient' && !colorGradientView) || (viewType === 'ColorPalette' && colorGradientView)) {
            setColorGradientView(!colorGradientView);
        }
    }, [colorGradientView]);
    var handleResetColor = React.useCallback(function () {
        setColorValue(defaultValue);
    }, [defaultValue]);
    var handleColorChange = React.useCallback(function (event) {
        setColorValue(event.value);
    }, []);
    var handleApplyBtnClick = React.useCallback(function (event) {
        setPrevColor(colorValue);
        if (props.onChange) {
            var ev = {
                value: colorValue,
                nativeEvent: event.nativeEvent,
                syntheticEvent: event
            };
            props.onChange.call(undefined, ev);
        }
    }, [colorValue, props.onChange]);
    var handleCancelBtnClick = React.useCallback(function () {
        setPrevColor(defaultColor);
    }, []);
    var handlePrevColorClick = React.useCallback(function () {
        setColorValue(prevColor);
    }, [prevColor]);
    var handleFocus = React.useCallback(function (event) {
        if (flatColorPickerRef.current && event.nativeEvent.target instanceof HTMLInputElement === false) {
            flatColorPickerRef.current.focus();
        }
    }, [flatColorPickerRef]);
    var handleFlatColorPickerBlur = React.useCallback(function (event) {
        var _a;
        var blurred = (!event.relatedTarget || !((_a = flatColorPickerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget)));
        if (!blurred) {
            return;
        }
        if (!showButtons) {
            setPrevColor(colorValue);
        }
        if (!showButtons && props.onChange) {
            var ev = {
                value: colorValue,
                nativeEvent: event.nativeEvent,
                syntheticEvent: event
            };
            props.onChange.call(undefined, ev);
        }
    }, [colorValue, showButtons, props.onChange]);
    return (React.createElement("div", { id: props.id, role: 'textbox', "aria-label": props.ariaLabel, "aria-labelledby": props.ariaLabelledBy, "aria-disabled": props.disabled ? 'true' : undefined, style: props.style, ref: flatColorPickerRef, tabIndex: (0, kendo_react_common_1.getTabIndex)(props.tabIndex, props.disabled), className: (0, kendo_react_common_1.classNames)('k-flatcolorpicker k-coloreditor', {
            'k-disabled': props.disabled
        }, props.className), onBlur: handleFlatColorPickerBlur },
        React.createElement(React.Fragment, null,
            props.header ||
                React.createElement("div", { className: "k-coloreditor-header k-hstack" },
                    React.createElement("div", { className: "k-coloreditor-header-actions k-hstack" },
                        React.createElement(kendo_react_buttons_1.ButtonGroup, { className: "k-button-group-flat" },
                            React.createElement(kendo_react_buttons_1.Button, { type: "button", "aria-label": localizationService.toLanguageString(messages_1.flatColorPickerColorGradientBtn, messages_1.messages[messages_1.flatColorPickerColorGradientBtn]), togglable: true, fillMode: 'flat', selected: colorGradientView, onClick: function () { return handleViewChange('ColorGradient'); }, icon: "droplet-slider", svgIcon: kendo_svg_icons_1.dropletSliderIcon }),
                            React.createElement(kendo_react_buttons_1.Button, { type: "button", "aria-label": localizationService.toLanguageString(messages_1.flatColorPickerColorPaletteBtn, messages_1.messages[messages_1.flatColorPickerColorPaletteBtn]), togglable: true, fillMode: 'flat', selected: !colorGradientView, onClick: function () { return handleViewChange('ColorPalette'); }, icon: "palette", svgIcon: kendo_svg_icons_1.paletteIcon }))),
                    React.createElement("div", { className: "k-spacer" }),
                    React.createElement("div", { className: "k-coloreditor-header-actions k-hstack" },
                        showClearButton &&
                            React.createElement(kendo_react_buttons_1.Button, { type: "button", fillMode: 'flat', onClick: handleResetColor, "aria-label": localizationService.toLanguageString(messages_1.flatColorPickerClearBtn, messages_1.messages[messages_1.flatColorPickerClearBtn]), icon: "droplet-slash", svgIcon: kendo_svg_icons_1.dropletSlashIcon }),
                        showPreview &&
                            React.createElement("div", { className: "k-coloreditor-preview k-vstack" },
                                React.createElement("span", { className: "k-coloreditor-preview-color k-color-preview", style: { background: colorValue } }),
                                React.createElement("span", { className: "k-coloreditor-current-color k-color-preview", style: { background: prevColor }, onClick: handlePrevColorClick })))),
            React.createElement("div", { className: "k-coloreditor-views k-vstack" }, colorGradientView
                ? React.createElement(main_1.ColorGradient, { ref: colorGradientRef, role: "none", tabIndex: -1, ariaLabel: undefined, value: colorValue, onChange: handleColorChange, onFocus: handleFocus, opacity: props.opacity, format: props.format })
                : React.createElement(main_1.ColorPalette, { ariaDisabled: true, ariaLabelledBy: 'required_label', value: colorValue, onChange: handleColorChange, onFocus: handleFocus })),
            showButtons &&
                React.createElement("div", { className: "k-coloreditor-footer k-actions k-actions-end" },
                    React.createElement(kendo_react_buttons_1.Button, { type: "button", className: "k-coloreditor-cancel", onClick: handleCancelBtnClick }, messages_1.messages[messages_1.flatColorPickerCancelBtn]),
                    React.createElement(kendo_react_buttons_1.Button, { type: "button", className: "k-coloreditor-apply k-primary", onClick: handleApplyBtnClick }, messages_1.messages[messages_1.flatColorPickerApplyBtn])))));
});
var propTypes = {
    id: PropTypes.string,
    style: PropTypes.any,
    className: PropTypes.string,
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    onChange: PropTypes.func,
    opacity: PropTypes.bool,
    format: PropTypes.any,
    tabIndex: PropTypes.number,
    ariaLabel: PropTypes.string,
    ariaLabelledBy: PropTypes.string,
    disabled: PropTypes.bool,
    view: PropTypes.any,
    header: PropTypes.any,
    showClearButton: PropTypes.bool,
    showPreview: PropTypes.bool,
    showButtons: PropTypes.bool
};
exports.FlatColorPicker.displayName = 'KendoFlatColorPicker';
exports.FlatColorPicker.propTypes = propTypes;
