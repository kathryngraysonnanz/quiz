import * as React from 'react';
/**
 * The arguments for the `onChange` FlatColorPicker event.
 */
export interface FlatColorPickerChangeEvent {
    /**
     * The current value of the FlatColorPicker.
     */
    value: string;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}
/**
 * Represents the properties of [FlatColorPicker]({% slug api_inputs_flatcolorpicker %}) component.
 */
export interface FlatColorPickerProps {
    /**
     * Sets the `id` property of the top `div` element of the FlatColorPicker.
     */
    id?: string;
    /**
     * Sets additional CSS styles to the FlatColorPicker.
     */
    style?: React.CSSProperties;
    /**
     * Sets additional classes to the FlatColorPicker.
     */
    className?: string;
    /**
     * Sets the color value.
     */
    value?: string;
    /**
     * Sets the default color value.
     */
    defaultValue?: string;
    /**
     * The event handler that will be fired when the user edits the value.
     */
    onChange?: (event: FlatColorPickerChangeEvent) => void;
    /**
     * Specifies whether we should display the opacity slider to allow selection of transparency.
     *
     * @default true
     */
    opacity?: boolean;
    /**
     * Sets the default input format in the gradient input editor.
     *
     * @default 'rgb'
     */
    format?: 'hex' | 'rgba' | 'rgb';
    /**
     * Sets the `tabIndex` property of the FlatColorPicker.
     */
    tabIndex?: number;
    /**
     * Represents the label of the FlatColorPicker component.
     */
    ariaLabel?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Determines whether the FlatColorPicker is disabled.
     */
    disabled?: boolean;
    /**
     * Sets the FlatColorPicker view. The default is `ColorGradient`.
     */
    view?: 'ColorGradient' | 'ColorPalette' | undefined;
    /**
     * Sets custom header component.
     */
    header?: React.ComponentType;
    /**
     * Specifies whether clear button will be rendered in the header.
     */
    showClearButton?: boolean;
    /**
     * Specifies whether preview and revert color boxes will be rendered in the header.
     */
    showPreview?: boolean;
    /**
     * Specifies whether action buttons will be rendered in the footer.
     */
    showButtons?: boolean;
}
/**
 * Represents the target (element and props) of the FlatColorPicker.
 */
export interface FlatColorPickerHandle {
    /**
     * The current element or `null` if there is none.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the FlatColorPicker.
     */
    props: FlatColorPickerProps;
    /**
     * The focus event callback.
     */
    focus: () => void;
    /**
     * The current value of the FlatColorPicker.
     */
    value: string;
}
/**
 * Represents the [KendoReact FlatColorPicker component]({% slug overview_flatcolorpicker %}).
 * Accepts properties of type [FlatColorPickerProps]({% slug api_inputs_flatcolorpickerprops %}). Obtaining the [FlatColorPickerHandle]({% slug api_inputs_flatcolorpickerhandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <FlatColorPicker />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const FlatColorPicker: React.ForwardRefExoticComponent<FlatColorPickerProps & React.RefAttributes<FlatColorPickerHandle | null>>;
