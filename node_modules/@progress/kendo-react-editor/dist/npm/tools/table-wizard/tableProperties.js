"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableProperties = void 0;
var React = require("react");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_inputs_1 = require("@progress/kendo-react-inputs");
var kendo_react_dropdowns_1 = require("@progress/kendo-react-dropdowns");
var kendo_react_dialogs_1 = require("@progress/kendo-react-dialogs");
var kendo_react_layout_1 = require("@progress/kendo-react-layout");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var utils_1 = require("./../utils");
var tableCellProperties_1 = require("./tableCellProperties");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./../../messages");
var tablePropsUtils_1 = require("./tablePropsUtils");
/**
 * @hidden
 */
var TableProperties = function (props) {
    var view = props.view, buttonProps = __rest(props, ["view"]);
    var loc = (0, kendo_react_intl_1.useLocalization)();
    var _a = React.useState(false), showDialog = _a[0], setShowDialog = _a[1];
    var inTable = Boolean(view && (0, utils_1.parentNode)(view.state.selection.$from, function (n) { return n.type.spec.tableRole === 'table'; }));
    var onClick = React.useCallback(function () {
        setShowDialog(true);
    }, []);
    var onClose = React.useCallback(function () {
        setShowDialog(false);
    }, []);
    var onSave = React.useCallback(function (data) {
        if (view && data) {
            var tr = (0, tablePropsUtils_1.applyTableData)(view.state, data);
            if (tr) {
                view.dispatch(tr);
            }
        }
        setShowDialog(false);
    }, [view]);
    return (React.createElement(React.Fragment, null,
        React.createElement(kendo_react_buttons_1.Button, __assign({ type: "button", title: loc.toLanguageString(messages_1.keys.tableProperties, messages_1.messages[messages_1.keys.tableProperties]), icon: 'table-properties', svgIcon: kendo_svg_icons_1.tablePropertiesIcon, onClick: onClick, disabled: !inTable }, utils_1.onDownPreventDefault, buttonProps)),
        showDialog && React.createElement(TablePropertiesDialog, { onClose: onClose, onSave: onSave, view: view })));
};
exports.TableProperties = TableProperties;
var alignData = [
    { textKey: messages_1.keys.tablePropertiesAlignLeft, text: messages_1.messages[messages_1.keys.tablePropertiesAlignLeft],
        value: 'left', icon: 'table-align-middle-left', svgIcon: kendo_svg_icons_1.tableAlignMiddleLeftIcon },
    { textKey: messages_1.keys.tablePropertiesAlignCenter, text: messages_1.messages[messages_1.keys.tablePropertiesAlignCenter],
        value: 'center', icon: 'table-align-middle-center', svgIcon: kendo_svg_icons_1.tableAlignMiddleCenterIcon },
    { textKey: messages_1.keys.tablePropertiesAlignRight, text: messages_1.messages[messages_1.keys.tablePropertiesAlignRight],
        value: 'right', icon: 'table-align-middle-right', svgIcon: kendo_svg_icons_1.tableAlignMiddleRightIcon },
    { textKey: messages_1.keys.tablePropertiesNoAlignment, text: messages_1.messages[messages_1.keys.tablePropertiesNoAlignment],
        value: '', icon: 'align-remove', svgIcon: kendo_svg_icons_1.tableAlignRemoveIcon }
];
var tablePosition = [{
        textKey: messages_1.keys.tablePropertiesLeft,
        text: messages_1.messages[messages_1.keys.tablePropertiesLeft],
        value: 'left',
        style: {},
        icon: 'table-position-left',
        svgIcon: kendo_svg_icons_1.tablePositionStartIcon
    }, {
        textKey: messages_1.keys.tablePropertiesCenter,
        text: messages_1.messages[messages_1.keys.tablePropertiesCenter],
        value: 'center',
        style: {},
        icon: 'table-position-center',
        svgIcon: kendo_svg_icons_1.tablePositionCenterIcon
    }, {
        textKey: messages_1.keys.tablePropertiesRight,
        text: messages_1.messages[messages_1.keys.tablePropertiesRight],
        value: 'right',
        style: {},
        icon: 'table-position-right',
        svgIcon: kendo_svg_icons_1.tablePositionEndIcon
    }].map(function (p) { return (__assign(__assign({}, p), { style: tablePropsUtils_1.tablePositionStyles[p.value] })); });
var captionPositionData = [{
        textKey: messages_1.keys.tablePropertiesTop,
        text: messages_1.messages[messages_1.keys.tablePropertiesTop],
        value: 'top',
        icon: 'position-top',
        svgIcon: kendo_svg_icons_1.positionTopIcon
    }, {
        textKey: messages_1.keys.tablePropertiesBottom,
        text: messages_1.messages[messages_1.keys.tablePropertiesBottom],
        value: 'bottom',
        icon: 'position-bottom',
        svgIcon: kendo_svg_icons_1.positionBottomIcon
    }];
var associateHeadersData = [
    { textKey: messages_1.keys.tablePropertiesNone, text: messages_1.messages[messages_1.keys.tablePropertiesNone], value: 'none' },
    { textKey: messages_1.keys.tablePropertiesUsingScopeAttribute, text: messages_1.messages[messages_1.keys.tablePropertiesUsingScopeAttribute], value: 'scope' },
    { textKey: messages_1.keys.tablePropertiesUsingIdAttributes, text: messages_1.messages[messages_1.keys.tablePropertiesUsingIdAttributes], value: 'id' }
];
var TablePropertiesDialog = function (props) {
    var defaults = React.useMemo(function () {
        var state = props.view && props.view.state;
        var data = state ? (0, tablePropsUtils_1.tableDefaultData)(state) : tablePropsUtils_1.initialTableData;
        return data;
    }, [props.view]);
    var loc = (0, kendo_react_intl_1.useLocalization)();
    var _a = React.useState(0), selected = _a[0], setSelected = _a[1];
    var onSelect = React.useCallback(function (event) {
        setSelected(event.selected);
    }, []);
    // General tab refs
    var rows = React.useRef(null);
    var columns = React.useRef(null);
    var width = React.useRef(null);
    var height = React.useRef(null);
    var cellSpacing = React.useRef(null);
    var cellPadding = React.useRef(null);
    var borderWidth = React.useRef(null);
    var widthUnit = React.useRef(null);
    var heightUnit = React.useRef(null);
    var position = React.useRef(null);
    var alignment = React.useRef(null);
    var borderStyle = React.useRef(null);
    var backgroundColor = React.useRef(null);
    var borderColor = React.useRef(null);
    var collapseBorders = React.useRef(null);
    // Advanced tab refs
    var id = React.useRef(null);
    var className = React.useRef(null);
    var caption = React.useRef(null);
    var headerRows = React.useRef(null);
    var headerColumns = React.useRef(null);
    var captionAlignment = React.useRef(null);
    var captionPosition = React.useRef(null);
    var associateHeaders = React.useRef(null);
    var onSave = React.useCallback(function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        var data = {
            rows: ((_a = rows.current) === null || _a === void 0 ? void 0 : _a.value) || 0,
            columns: ((_b = columns.current) === null || _b === void 0 ? void 0 : _b.value) || 0,
            width: width.current ? width.current.value : null,
            height: height.current ? height.current.value : null,
            cellSpacing: cellSpacing.current ? cellSpacing.current.value : null,
            cellPadding: cellPadding.current ? cellPadding.current.value : null,
            borderWidth: borderWidth.current ? borderWidth.current.value : null,
            widthUnit: ((_c = widthUnit.current) === null || _c === void 0 ? void 0 : _c.value) || '',
            heightUnit: ((_d = heightUnit.current) === null || _d === void 0 ? void 0 : _d.value) || '',
            position: ((_f = (_e = position.current) === null || _e === void 0 ? void 0 : _e.value) === null || _f === void 0 ? void 0 : _f.value) || null,
            textAlign: ((_g = alignment.current) === null || _g === void 0 ? void 0 : _g.value) ? alignment.current.value.value : null,
            borderStyle: ((_h = borderStyle.current) === null || _h === void 0 ? void 0 : _h.value) ? borderStyle.current.value.value : null,
            backgroundColor: (_j = backgroundColor.current) === null || _j === void 0 ? void 0 : _j.value,
            borderColor: (_k = borderColor.current) === null || _k === void 0 ? void 0 : _k.value,
            collapseBorders: Boolean((_m = (_l = collapseBorders.current) === null || _l === void 0 ? void 0 : _l.element) === null || _m === void 0 ? void 0 : _m.checked),
            id: String(((_o = id.current) === null || _o === void 0 ? void 0 : _o.value) || ''),
            className: String(((_p = className.current) === null || _p === void 0 ? void 0 : _p.value) || ''),
            caption: String(((_q = caption.current) === null || _q === void 0 ? void 0 : _q.value) || ''),
            headerRows: ((_r = headerRows.current) === null || _r === void 0 ? void 0 : _r.value) || 0,
            headerColumns: ((_s = headerColumns.current) === null || _s === void 0 ? void 0 : _s.value) || 0,
            captionAlignment: ((_t = captionAlignment.current) === null || _t === void 0 ? void 0 : _t.value) ? captionAlignment.current.value.value : null,
            captionPosition: ((_u = captionPosition.current) === null || _u === void 0 ? void 0 : _u.value) ? captionPosition.current.value.value : null,
            associateHeaders: ((_v = associateHeaders.current) === null || _v === void 0 ? void 0 : _v.value) ? associateHeaders.current.value.value : 'none'
        };
        props.onSave.call(undefined, data);
    }, [props.onSave]);
    var general = (React.createElement("div", { className: "k-form k-form-md" },
        React.createElement("fieldset", { className: "k-form-fieldset" },
            React.createElement("div", { className: "k-form-layout k-d-grid k-grid-cols-4 k-gap-x-4" },
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesRows, messages_1.messages[messages_1.keys.tablePropertiesRows])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: rows, defaultValue: defaults.rows, min: 1 }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesColumns, messages_1.messages[messages_1.keys.tablePropertiesColumns])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: columns, defaultValue: defaults.columns, min: 1 }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesWidth, messages_1.messages[messages_1.keys.tablePropertiesWidth])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: width, defaultValue: defaults.width, min: 0, placeholder: loc.toLanguageString(messages_1.keys.sizeAuto, messages_1.messages[messages_1.keys.sizeAuto]) }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, "\u00A0"),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_dropdowns_1.AutoComplete, { ref: widthUnit, defaultValue: defaults.widthUnit, data: utils_1.units, popupSettings: utils_1.popupSettings }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesHeight, messages_1.messages[messages_1.keys.tablePropertiesHeight])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: height, defaultValue: defaults.height, min: 0, placeholder: loc.toLanguageString(messages_1.keys.sizeAuto, messages_1.messages[messages_1.keys.sizeAuto]) }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, "\u00A0"),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_dropdowns_1.AutoComplete, { ref: heightUnit, defaultValue: defaults.heightUnit, data: utils_1.units, popupSettings: utils_1.popupSettings }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesPosition, messages_1.messages[messages_1.keys.tablePropertiesPosition])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: position, defaultValue: tablePosition.find(function (p) { return p.value === defaults.position; }), popupSettings: utils_1.popupSettings, data: tablePosition.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), textField: 'text', dataItemKey: 'value', valueRender: tableCellProperties_1.valueRenderWithIcon, itemRender: tableCellProperties_1.itemRenderWithIcon }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesAlignment, messages_1.messages[messages_1.keys.tablePropertiesAlignment])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: alignment, defaultValue: alignData.find(function (a) { return a.value === defaults.textAlign; }), data: alignData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), textField: 'text', dataItemKey: 'value', popupSettings: utils_1.popupSettings, valueRender: tableCellProperties_1.valueRenderWithIcon, itemRender: tableCellProperties_1.itemRenderWithIcon }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCellSpacing, messages_1.messages[messages_1.keys.tablePropertiesCellSpacing])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: cellSpacing, defaultValue: defaults.cellSpacing, placeholder: loc.toLanguageString(messages_1.keys.sizeAuto, messages_1.messages[messages_1.keys.sizeAuto]), min: 0 }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCellPadding, messages_1.messages[messages_1.keys.tablePropertiesCellPadding])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: cellPadding, defaultValue: defaults.cellPadding, placeholder: loc.toLanguageString(messages_1.keys.sizeAuto, messages_1.messages[messages_1.keys.sizeAuto]), min: 0 }))),
                React.createElement("div", { className: "k-form-field k-col-span-full" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesTableBackground, messages_1.messages[messages_1.keys.tablePropertiesTableBackground])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.ColorPicker, { ref: backgroundColor, defaultValue: defaults.backgroundColor }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesBorderWidth, messages_1.messages[messages_1.keys.tablePropertiesBorderWidth])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: borderWidth, defaultValue: defaults.borderWidth, min: 0 }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesBorderColor, messages_1.messages[messages_1.keys.tablePropertiesBorderColor])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.ColorPicker, { ref: borderColor, defaultValue: defaults.borderColor }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesBorderStyle, messages_1.messages[messages_1.keys.tablePropertiesBorderStyle])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: borderStyle, defaultValue: utils_1.borderStyles.find(function (s) { return s.value === defaults.borderStyle; }), popupSettings: utils_1.popupSettings, data: utils_1.borderStyles.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), textField: 'text', dataItemKey: 'value' }))),
                React.createElement("div", { className: "k-form-field k-col-span-full" },
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.Checkbox, { ref: collapseBorders, className: "k-checkbox-wrap", label: loc.toLanguageString(messages_1.keys.tablePropertiesCollapseBorders, messages_1.messages[messages_1.keys.tablePropertiesCollapseBorders]), defaultChecked: defaults.collapseBorders })))))));
    var advanced = (React.createElement("div", { className: "k-form k-form-md" },
        React.createElement("fieldset", { className: "k-form-fieldset" },
            React.createElement("div", { className: "k-form-layout k-d-grid" },
                React.createElement("div", { className: "k-form-field" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesId, messages_1.messages[messages_1.keys.tablePropertiesId])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.TextBox, { ref: id, defaultValue: defaults.id }))),
                React.createElement("div", { className: "k-form-field" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCssClass, messages_1.messages[messages_1.keys.tablePropertiesCssClass])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(kendo_react_inputs_1.TextBox, { ref: className, defaultValue: defaults.className }))),
                React.createElement("fieldset", { className: "k-form-fieldset" },
                    React.createElement("legend", { className: "k-form-legend" }, loc.toLanguageString(messages_1.keys.tablePropertiesAccessibility, messages_1.messages[messages_1.keys.tablePropertiesAccessibility])),
                    React.createElement("div", { className: "k-d-grid k-grid-cols-4 k-gap-x-4" },
                        React.createElement("div", { className: "k-form-field k-col-span-full" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCaption, messages_1.messages[messages_1.keys.tablePropertiesCaption])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_inputs_1.TextBox, { ref: caption, defaultValue: defaults.caption }))),
                        React.createElement("div", { className: "k-form-field k-col-span-2" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCaptionPosition, messages_1.messages[messages_1.keys.tablePropertiesCaptionPosition])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: captionPosition, defaultValue: captionPositionData.find(function (i) { return i.value === defaults.captionPosition; }), data: captionPositionData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), popupSettings: utils_1.popupSettings, textField: 'text', dataItemKey: 'value', valueRender: tableCellProperties_1.valueRenderWithIcon, itemRender: tableCellProperties_1.itemRenderWithIcon }))),
                        React.createElement("div", { className: "k-form-field k-col-span-2" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesCaptionAlignment, messages_1.messages[messages_1.keys.tablePropertiesCaptionAlignment])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: captionAlignment, defaultValue: alignData.find(function (i) { return i.value === defaults.captionAlignment; }), data: alignData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), popupSettings: utils_1.popupSettings, textField: 'text', dataItemKey: 'value', valueRender: tableCellProperties_1.valueRenderWithIcon, itemRender: tableCellProperties_1.itemRenderWithIcon }))),
                        React.createElement("div", { className: "k-form-field k-col-span-1" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesHeaderRows, messages_1.messages[messages_1.keys.tablePropertiesHeaderRows])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: headerRows, defaultValue: defaults.headerRows, min: 0 }))),
                        React.createElement("div", { className: "k-form-field k-col-span-1" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesHeaderCols, messages_1.messages[messages_1.keys.tablePropertiesHeaderCols])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_inputs_1.NumericTextBox, { ref: headerColumns, defaultValue: defaults.headerColumns, min: 0 }))),
                        React.createElement("div", { className: "k-form-field k-col-span-2" },
                            React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(messages_1.keys.tablePropertiesAssociateHeaders, messages_1.messages[messages_1.keys.tablePropertiesAssociateHeaders])),
                            React.createElement("div", { className: "k-form-field-wrap" },
                                React.createElement(kendo_react_dropdowns_1.DropDownList, { ref: associateHeaders, defaultValue: associateHeadersData.find(function (i) { return i.value === defaults.associateHeaders; }), data: associateHeadersData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), popupSettings: utils_1.popupSettings, textField: 'text', dataItemKey: 'value' })))))))));
    var content = (React.createElement(kendo_react_layout_1.TabStrip, { selected: selected, onSelect: onSelect, animation: false, keepTabsMounted: true },
        React.createElement(kendo_react_layout_1.TabStripTab, { title: loc.toLanguageString(messages_1.keys.tablePropertiesGeneral, messages_1.messages[messages_1.keys.tablePropertiesGeneral]) }, general),
        React.createElement(kendo_react_layout_1.TabStripTab, { title: loc.toLanguageString(messages_1.keys.tablePropertiesAdvanced, messages_1.messages[messages_1.keys.tablePropertiesAdvanced]) }, advanced)));
    var actionButtons = [(React.createElement(kendo_react_buttons_1.Button, { themeColor: 'primary', key: "save", onClick: onSave }, loc.toLanguageString(messages_1.keys.tablePropertiesSave, messages_1.messages[messages_1.keys.tablePropertiesSave]))), (React.createElement(kendo_react_buttons_1.Button, { onClick: props.onClose, key: "cancel" }, loc.toLanguageString(messages_1.keys.tablePropertiesCancel, messages_1.messages[messages_1.keys.tablePropertiesCancel])))];
    return (React.createElement(kendo_react_dialogs_1.Window, { className: 'k-editor-window k-editor-table-wizard-window', title: loc.toLanguageString(messages_1.keys.tableProperties, messages_1.messages[messages_1.keys.tableProperties]), onClose: props.onClose, key: "dialog", style: { userSelect: 'none' }, width: 480, height: 630, modal: true, minimizeButton: function () { return null; }, maximizeButton: function () { return null; }, resizable: false },
        content,
        React.createElement.apply(React, __spreadArray([kendo_react_dialogs_1.WindowActionsBar, { layout: 'start' }], actionButtons, false))));
};
