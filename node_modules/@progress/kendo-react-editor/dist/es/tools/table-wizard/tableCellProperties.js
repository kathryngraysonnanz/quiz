var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { Button } from '@progress/kendo-react-buttons';
import { Checkbox, ColorPicker, InputPrefix, NumericTextBox, TextBox } from '@progress/kendo-react-inputs';
import { AutoComplete, DropDownList } from '@progress/kendo-react-dropdowns';
import { Window, WindowActionsBar } from '@progress/kendo-react-dialogs';
import { tableAlignBottomCenterIcon, tableAlignBottomLeftIcon, tableAlignBottomRightIcon, tableAlignMiddleCenterIcon, tableAlignMiddleLeftIcon, tableAlignMiddleRightIcon, tableAlignTopCenterIcon, tableAlignTopLeftIcon, tableAlignTopRightIcon, tableAlignRemoveIcon, tableCellPropertiesIcon, textWrapIcon, parameterStringIcon } from '@progress/kendo-svg-icons';
import { borderStyles as borderStylesData, onDownPreventDefault, popupSettings, units, parentNode } from '../utils';
import { IconWrap } from '@progress/kendo-react-common';
import { useLocalization } from '@progress/kendo-react-intl';
import { messages, keys } from './../../messages';
import { applyCellsData, cellsDefaultData } from './cellPropsUtils';
/**
 * @hidden
 */
export var TableCellProperties = function (props) {
    var view = props.view, buttonProps = __rest(props, ["view"]);
    var _a = React.useState(false), showDialog = _a[0], setShowDialog = _a[1];
    var loc = useLocalization();
    var inTable = Boolean(view && parentNode(view.state.selection.$from, function (n) { return n.type.spec.tableRole === 'table'; }));
    var onClick = React.useCallback(function () {
        setShowDialog(true);
    }, []);
    var onSave = React.useCallback(function (data) {
        if (view && data) {
            var tr = applyCellsData(view.state, data);
            if (tr.docChanged) {
                view.dispatch(tr);
            }
        }
        setShowDialog(false);
    }, [view]);
    var onCancel = React.useCallback(function () {
        setShowDialog(false);
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, __assign({ type: "button", title: loc.toLanguageString(keys.cellProperties, messages[keys.cellProperties]), icon: 'table-cell-properties', svgIcon: tableCellPropertiesIcon, onClick: onClick, disabled: !inTable }, onDownPreventDefault, buttonProps)),
        showDialog && view && React.createElement(TableCellPropertiesDialog, { view: view, onCancel: onCancel, onSave: onSave })));
};
var alignData = [
    { textKey: keys.cellPropertiesLeftTop, text: messages[keys.cellPropertiesLeftTop],
        icon: 'table-align-top-left', svgIcon: tableAlignTopLeftIcon, value: { x: 'left', y: 'top' } },
    { textKey: keys.cellPropertiesCenterTop, text: messages[keys.cellPropertiesCenterTop],
        icon: 'table-align-top-center', svgIcon: tableAlignTopCenterIcon, value: { x: 'center', y: 'top' } },
    { textKey: keys.cellPropertiesRightTop, text: messages[keys.cellPropertiesRightTop],
        icon: 'table-align-top-right', svgIcon: tableAlignTopRightIcon, value: { x: 'right', y: 'top' } },
    { textKey: keys.cellPropertiesLeftMiddle, text: messages[keys.cellPropertiesLeftMiddle],
        icon: 'table-align-middle-left', svgIcon: tableAlignMiddleLeftIcon, value: { x: 'left', y: 'middle' } },
    { textKey: keys.cellPropertiesCenterMiddle, text: messages[keys.cellPropertiesCenterMiddle],
        icon: 'table-align-middle-center', svgIcon: tableAlignMiddleCenterIcon, value: { x: 'center', y: 'middle' } },
    { textKey: keys.cellPropertiesRightMiddle, text: messages[keys.cellPropertiesRightMiddle],
        icon: 'table-align-middle-right', svgIcon: tableAlignMiddleRightIcon, value: { x: 'right', y: 'middle' } },
    { textKey: keys.cellPropertiesLeftBottom, text: messages[keys.cellPropertiesLeftBottom],
        icon: 'table-align-bottom-left', svgIcon: tableAlignBottomLeftIcon, value: { x: 'left', y: 'bottom' } },
    { textKey: keys.cellPropertiesCenterBottom, text: messages[keys.cellPropertiesCenterBottom],
        icon: 'table-align-bottom-center', svgIcon: tableAlignBottomCenterIcon, value: { x: 'center', y: 'bottom' } },
    { textKey: keys.cellPropertiesRightBottom, text: messages[keys.cellPropertiesRightBottom],
        icon: 'table-align-bottom-right', svgIcon: tableAlignBottomRightIcon, value: { x: 'right', y: 'bottom' } },
    { textKey: keys.cellPropertiesNoAlignment, text: messages[keys.cellPropertiesNoAlignment],
        icon: 'align-remove', svgIcon: tableAlignRemoveIcon, value: { x: '', y: '' } }
];
var textControlData = [
    { textKey: keys.cellPropertiesWrap, text: messages[keys.cellPropertiesWrap],
        value: '', icon: 'text-wrap', svgIcon: textWrapIcon },
    { textKey: keys.cellPropertiesFitToCell, text: messages[keys.cellPropertiesFitToCell],
        value: 'nowrap', icon: 'parameter-string', svgIcon: parameterStringIcon }
];
/**
 * @hidden
 */
export var valueRenderWithIcon = function (element, value) {
    if (!value) {
        return element;
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(InputPrefix, null,
            React.createElement(IconWrap, { icon: value.svgIcon, name: value.icon })),
        element));
};
/**
 * @hidden
 */
export var itemRenderWithIcon = function (li, itemProps) {
    var itemChildren = (React.createElement(React.Fragment, null,
        React.createElement(InputPrefix, null,
            React.createElement(IconWrap, { icon: itemProps.dataItem.svgIcon, name: itemProps.dataItem.icon })),
        li.props.children));
    return React.cloneElement(li, li.props, itemChildren);
};
var TableCellPropertiesDialog = function (props) {
    var defaults = React.useMemo(function () {
        return cellsDefaultData(props.view.state);
    }, [props.view]);
    var loc = useLocalization();
    var applyToAll = React.useRef(null);
    var applyToAllDef = defaults.applyToAll;
    var cellWidth = React.useRef(null);
    var cellWidthDef = defaults.cellWidth;
    var widthUnit = React.useRef(null);
    if (defaults.widthUnit && !units.includes(defaults.widthUnit)) {
        units.push(defaults.widthUnit);
    }
    var widthUnitDef = defaults.widthUnit || '';
    var cellHeight = React.useRef(null);
    var cellHeightDef = defaults.cellHeight;
    var heightUnit = React.useRef(null);
    if (defaults.heightUnit && !units.includes(defaults.heightUnit)) {
        units.push(defaults.heightUnit);
    }
    var heightUnitDef = defaults.heightUnit || '';
    var alignment = React.useRef(null);
    var alignmentDef = alignData.find(function (al) { return al.value.x !== undefined && defaults.alignment &&
        al.value.x === defaults.alignment.x && al.value.y === defaults.alignment.y; }) || null;
    var textControl = React.useRef(null);
    var textControlDef = textControlData.find(function (d) { return d.value === defaults.textControl; });
    var backgroundColor = React.useRef(null);
    var backgroundColorDef = defaults.backgroundColor;
    var cellPadding = React.useRef(null);
    var cellPaddingDef = defaults.cellPadding;
    var borderWidth = React.useRef(null);
    var borderWidthDef = defaults.borderWidth;
    var borderColor = React.useRef(null);
    var borderColorDef = defaults.borderColor;
    var borderStyle = React.useRef(null);
    var borderStyleDef = borderStylesData.find(function (s) { return s.value === defaults.borderStyle; });
    var id = React.useRef(null);
    var idDef = defaults.id;
    var className = React.useRef(null);
    var classNameDef = defaults.className;
    var onSave = React.useCallback(function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        var data = {
            applyToAll: Boolean((_b = (_a = applyToAll.current) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.checked),
            cellWidth: ((_c = cellWidth.current) === null || _c === void 0 ? void 0 : _c.value) || null,
            widthUnit: ((_d = widthUnit.current) === null || _d === void 0 ? void 0 : _d.value) || '',
            cellHeight: ((_e = cellHeight.current) === null || _e === void 0 ? void 0 : _e.value) || null,
            heightUnit: ((_f = heightUnit.current) === null || _f === void 0 ? void 0 : _f.value) || '',
            alignment: (_h = (_g = alignment.current) === null || _g === void 0 ? void 0 : _g.value) === null || _h === void 0 ? void 0 : _h.value,
            textControl: (_k = (_j = textControl.current) === null || _j === void 0 ? void 0 : _j.value) === null || _k === void 0 ? void 0 : _k.value,
            backgroundColor: (_l = backgroundColor.current) === null || _l === void 0 ? void 0 : _l.value,
            cellPadding: typeof ((_m = cellPadding.current) === null || _m === void 0 ? void 0 : _m.value) === 'number' ? (_o = cellPadding.current) === null || _o === void 0 ? void 0 : _o.value : null,
            borderWidth: typeof ((_p = borderWidth.current) === null || _p === void 0 ? void 0 : _p.value) === 'number' ? (_q = borderWidth.current) === null || _q === void 0 ? void 0 : _q.value : null,
            borderColor: (_r = borderColor.current) === null || _r === void 0 ? void 0 : _r.value,
            borderStyle: ((_t = (_s = borderStyle.current) === null || _s === void 0 ? void 0 : _s.value) === null || _t === void 0 ? void 0 : _t.value) || null,
            id: String(((_u = id.current) === null || _u === void 0 ? void 0 : _u.value) || ''),
            className: String(((_v = className.current) === null || _v === void 0 ? void 0 : _v.value) || '')
        };
        props.onSave.call(undefined, data);
    }, [props.onSave]);
    var content = (React.createElement("div", { className: "k-form k-form-md" },
        React.createElement("fieldset", { className: "k-form-fieldset" },
            React.createElement("div", { className: "k-form-layout k-d-grid k-grid-cols-4 k-gap-x-4" },
                React.createElement("div", { className: "k-form-field k-col-span-full" },
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement("span", { className: "k-checkbox-wrap" },
                            React.createElement(Checkbox, { ref: applyToAll, defaultChecked: applyToAllDef })),
                        React.createElement("label", { className: "k-checkbox-label" }, loc.toLanguageString(keys.cellPropertiesApplyToAllCells, messages[keys.cellPropertiesApplyToAllCells])))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesWidth, messages[keys.cellPropertiesWidth])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(NumericTextBox, { ref: cellWidth, defaultValue: cellWidthDef, min: 0, placeholder: loc.toLanguageString(keys.sizeAuto, messages[keys.sizeAuto]) }),
                        React.createElement("div", { className: "k-form-hint" }, loc.toLanguageString(keys.cellPropertiesApplyToColumn, messages[keys.cellPropertiesApplyToColumn])))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, "\u00A0"),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(AutoComplete, { ref: widthUnit, defaultValue: widthUnitDef, data: units, popupSettings: popupSettings }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesHeight, messages[keys.cellPropertiesHeight])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(NumericTextBox, { ref: cellHeight, defaultValue: cellHeightDef, min: 0, placeholder: loc.toLanguageString(keys.sizeAuto, messages[keys.sizeAuto]) }),
                        React.createElement("div", { className: "k-form-hint" }, loc.toLanguageString(keys.cellPropertiesApplyToRow, messages[keys.cellPropertiesApplyToRow])))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, "\u00A0"),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(AutoComplete, { ref: heightUnit, defaultValue: heightUnitDef, data: units, popupSettings: popupSettings }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesAlignment, messages[keys.cellPropertiesAlignment])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(DropDownList, { ref: alignment, defaultValue: alignmentDef, data: alignData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), textField: 'text', dataItemKey: 'text', popupSettings: popupSettings, valueRender: valueRenderWithIcon, itemRender: itemRenderWithIcon }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesTextControl, messages[keys.cellPropertiesTextControl])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(DropDownList, { ref: textControl, defaultValue: textControlDef, data: textControlData.map(function (i) { return (__assign(__assign({}, i), { text: loc.toLanguageString(i.textKey, i.text) })); }), textField: 'text', dataItemKey: 'value', popupSettings: popupSettings, valueRender: valueRenderWithIcon, itemRender: itemRenderWithIcon }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesCellPadding, messages[keys.cellPropertiesCellPadding])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(NumericTextBox, { ref: cellPadding, defaultValue: cellPaddingDef, min: 0 }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesBackground, messages[keys.cellPropertiesBackground])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(ColorPicker, { ref: backgroundColor, defaultValue: backgroundColorDef }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesBorderWidth, messages[keys.cellPropertiesBorderWidth])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(NumericTextBox, { ref: borderWidth, defaultValue: borderWidthDef, min: 0 }))),
                React.createElement("div", { className: "k-form-field k-col-span-1" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesBorderColor, messages[keys.cellPropertiesBorderColor])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(ColorPicker, { ref: borderColor, defaultValue: borderColorDef }))),
                React.createElement("div", { className: "k-form-field k-col-span-2" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesBorderStyle, messages[keys.cellPropertiesBorderStyle])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(DropDownList, { ref: borderStyle, defaultValue: borderStyleDef, popupSettings: popupSettings, data: borderStylesData, textField: 'text', dataItemKey: 'value' }))),
                React.createElement("div", { className: "k-form-field k-col-span-full" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesId, messages[keys.cellPropertiesId])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(TextBox, { ref: id, defaultValue: idDef }))),
                React.createElement("div", { className: "k-form-field k-col-span-full" },
                    React.createElement("label", { className: "k-label k-form-label" }, loc.toLanguageString(keys.cellPropertiesCssClass, messages[keys.cellPropertiesCssClass])),
                    React.createElement("div", { className: "k-form-field-wrap" },
                        React.createElement(TextBox, { ref: className, defaultValue: classNameDef })))))));
    var actionButtons = [(React.createElement(Button, { themeColor: 'primary', key: "save", onClick: onSave }, loc.toLanguageString(keys.cellPropertiesSave, messages[keys.cellPropertiesSave]))), (React.createElement(Button, { onClick: props.onCancel, key: "cancel" }, loc.toLanguageString(keys.cellPropertiesCancel, messages[keys.cellPropertiesCancel])))];
    return (React.createElement(Window, { className: 'k-editor-window k-editor-table-wizard-window', title: loc.toLanguageString(keys.cellProperties, messages[keys.cellProperties]), onClose: props.onCancel, key: "dialog", style: { userSelect: 'none' }, width: 408, height: 587, modal: true, minimizeButton: function () { return null; }, maximizeButton: function () { return null; }, resizable: false },
        content,
        React.createElement.apply(React, __spreadArray([WindowActionsBar, { layout: 'start' }], actionButtons, false))));
};
