var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TextBox, InputPrefix } from '@progress/kendo-react-inputs';
import { searchIcon } from '@progress/kendo-svg-icons';
import { IconWrap } from '@progress/kendo-react-common';
/**
 * @hidden
 */
var ListFilter = React.forwardRef(function (props, ref) {
    var input = React.useRef(null);
    React.useImperativeHandle(ref, function () { return input.current; });
    return (React.createElement("div", { className: "k-list-filter" },
        React.createElement(TextBox, __assign({}, props, { ref: input, value: props.value || '', onChange: props.onChange, onKeyDown: props.onKeyDown, tabIndex: props.tabIndex, onClick: function (e) { return e.stopPropagation(); }, size: props.size, fillMode: props.fillMode, rounded: props.rounded, prefix: function () { return (React.createElement(InputPrefix, null,
                React.createElement(IconWrap, { name: 'search', icon: searchIcon }))); } }))));
});
ListFilter.propTypes = {
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),
    tabIndex: PropTypes.number,
    onChange: PropTypes.func,
    onKeyDown: PropTypes.func,
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])
};
ListFilter.displayName = 'KendoReactListFilter';
export default ListFilter;
