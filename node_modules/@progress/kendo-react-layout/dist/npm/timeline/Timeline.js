"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timeline = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var TimelineHorizontal_1 = require("./TimelineHorizontal");
var TimelineVertical_1 = require("./TimelineVertical");
var Timeline = function (props) {
    var collapsibleEvents = props.collapsibleEvents, transitionDuration = props.transitionDuration, className = props.className, alterMode = props.alterMode, horizontal = props.horizontal, events = props.events, dateFormat = props.dateFormat, onChange = props.onChange, onActionClick = props.onActionClick;
    var _a = React.useState(), trackAxisWidth = _a[0], setTrackAxisWidth = _a[1];
    var trackWrapRef = React.useRef(null);
    React.useEffect(function () {
        var _a;
        setTrackAxisWidth((_a = trackWrapRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth);
    }, []);
    return (React.createElement("div", { ref: trackWrapRef, className: (0, kendo_react_common_1.classNames)('k-timeline', {
            'k-timeline-collapsible': collapsibleEvents,
            'k-timeline-vertical': !horizontal,
            'k-timeline-alternating': alterMode,
            'k-timeline-horizontal': horizontal
        }, className), style: { width: "".concat(trackAxisWidth, "px") } }, horizontal ? React.createElement(TimelineHorizontal_1.TimelineHorizontal, { eventsData: events, dateFormat: dateFormat, transitionDuration: transitionDuration, onActionClick: onActionClick })
        : React.createElement(TimelineVertical_1.TimelineVertical, { eventsData: events, dateFormat: dateFormat, alterMode: alterMode, collapsibleEvents: collapsibleEvents, transitionDuration: transitionDuration, onChange: onChange, onActionClick: onActionClick })));
};
exports.Timeline = Timeline;
exports.Timeline.defaultProps = {
    alterMode: false,
    collapsibleEvents: true,
    dateFormat: 'MMM dd, yyyy'
};
exports.Timeline.propTypes = {
    className: PropTypes.string
};
