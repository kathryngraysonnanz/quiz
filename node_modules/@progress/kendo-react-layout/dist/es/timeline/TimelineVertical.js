import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TimelineCard } from './TimelineCard';
import { addYearsFlags } from './utils';
import { classNames, guid } from '@progress/kendo-react-common';
import { useInternationalization } from '@progress/kendo-react-intl';
export var TimelineVertical = function (props) {
    var intl = useInternationalization();
    var _a = React.useState(), eventsList = _a[0], setEventsList = _a[1];
    var collapsibleEvents = props.collapsibleEvents, transitionDuration = props.transitionDuration, eventsData = props.eventsData, dateFormat = props.dateFormat, alterMode = props.alterMode, onChange = props.onChange, onActionClick = props.onActionClick;
    React.useEffect(function () {
        setEventsList(addYearsFlags(eventsData));
    }, []);
    return (React.createElement("ul", null, eventsList && eventsList.map(function (event, index) {
        var cardId = guid();
        return (React.createElement(React.Fragment, { key: index }, event.yearFlag
            ? (React.createElement("li", { className: "k-timeline-flag-wrap" },
                React.createElement("span", { className: "k-timeline-flag" }, event.yearFlag)))
            : (React.createElement("li", { className: classNames('k-timeline-event', { 'k-reverse': index % 2 !== 0 }) },
                React.createElement("div", { className: "k-timeline-date-wrap" },
                    React.createElement("span", { className: "k-timeline-date", id: cardId }, intl.formatDate(event.date, dateFormat))),
                React.createElement("a", { className: "k-timeline-circle" }),
                React.createElement(TimelineCard, { id: cardId, tabindex: 0, eventData: event, alternated: alterMode && index % 2 !== 0, collapsible: collapsibleEvents, transitionDuration: transitionDuration, onChange: onChange, onActionClick: onActionClick })))));
    })));
};
TimelineVertical.propTypes = {
    onActionClick: PropTypes.func
};
