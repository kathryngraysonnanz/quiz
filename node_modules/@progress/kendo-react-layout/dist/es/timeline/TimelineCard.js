import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Card } from '../card/Card';
import { CardHeader } from '../card/CardHeader';
import { CardTitle } from '../card/CardTitle';
import { CardSubtitle } from '../card/CardSubtitle';
import { CardBody } from '../card/CardBody';
import { CardImage } from '../card/CardImage';
import { CardActions } from '../card/CardActions';
import { SvgIcon, classNames } from '@progress/kendo-react-common';
import { Reveal } from '@progress/kendo-react-animation';
import { chevronRightIcon } from '@progress/kendo-svg-icons';
export var TimelineCard = function (props) {
    var ANIMATION_DURATION = 400;
    var _a = props.eventData, title = _a.title, subtitle = _a.subtitle, actions = _a.actions, images = _a.images, description = _a.description;
    var _b = React.useState(props.eventData.opened || false), open = _b[0], setOpen = _b[1];
    var _c = React.useState(props.eventData.opened || !!props.collapsible), opened = _c[0], setOpened = _c[1];
    var toggleCard = function (event) {
        setOpen(!open);
        if (props.onChange) {
            var toggleEvent = {
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                eventData: props.eventData
            };
            props.onChange.call(undefined, toggleEvent);
        }
    };
    var actionClick = function (event) {
        if (props.onActionClick) {
            var actionClickEvent = {
                syntheticEvent: event,
                nativeEvent: event.nativeEvent,
                eventData: props.eventData
            };
            props.onActionClick.call(undefined, actionClickEvent);
        }
    };
    var cardBody = function () { return (React.createElement(React.Fragment, null,
        React.createElement(CardBody, null,
            React.createElement("div", { className: "k-card-description" },
                React.createElement("p", null, description),
                images && images.map(function (image, index) { return (React.createElement(CardImage, { key: index, src: image.src })); }))),
        React.createElement(CardActions, null, actions && actions.map(function (action, index) { return (React.createElement("a", { key: index, href: action.url, className: "k-button k-button-md k-rounded-md k-button-flat k-button-flat-primary", onClick: actionClick }, action.text)); })))); };
    return (React.createElement("div", { className: classNames('k-timeline-card', { 'k-collapsed': props.collapsible && opened }) },
        React.createElement(Card, { "aria-live": "polite", "aria-describedby": props.id, "aria-atomic": "true", tabIndex: props.tabindex, role: props.horizontal ? 'tabpanel' : 'button', "aria-expanded": props.collapsible && opened },
            React.createElement("span", { style: props.calloutStyle, className: classNames('k-timeline-card-callout', 'k-card-callout', { 'k-callout-n': props.horizontal }, { 'k-callout-e': props.alternated && !props.horizontal }, { 'k-callout-w': !props.alternated && !props.horizontal }) }),
            React.createElement("div", { className: 'k-card-inner' },
                React.createElement(CardHeader, null,
                    React.createElement(CardTitle, null,
                        React.createElement("span", { className: "k-event-title" }, title),
                        props.collapsible && React.createElement("span", { onClick: function (event) { return toggleCard(event); }, className: "k-event-collapse k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button" },
                            React.createElement(SvgIcon, { icon: chevronRightIcon }))),
                    subtitle && React.createElement(CardSubtitle, null, subtitle)),
                props.collapsible
                    ? React.createElement(Reveal, { transitionEnterDuration: props.transitionDuration || ANIMATION_DURATION, transitionExitDuration: props.transitionDuration || ANIMATION_DURATION, onBeforeEnter: function () { return setOpened(false); }, onAfterExited: function () { return setOpened(true); } }, open ? cardBody() : null)
                    : cardBody()))));
};
TimelineCard.propTypes = {
    onChange: PropTypes.func,
    onActionClick: PropTypes.func
};
