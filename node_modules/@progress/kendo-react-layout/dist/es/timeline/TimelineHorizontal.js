var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TimelineCard } from './TimelineCard';
import { addYearsFlags } from './utils';
import { caretAltLeftIcon, caretAltRightIcon } from '@progress/kendo-svg-icons';
import { useInternationalization } from '@progress/kendo-react-intl';
import { classNames, canUseDOM, SvgIcon } from '@progress/kendo-react-common';
export var TimelineHorizontal = function (props) {
    var DEFAULT_EVENT_POINT_WITH = 150;
    var EVENT_CARD_TRANSITION_DURATION = 300;
    var intl = useInternationalization();
    var _a = React.useState(false), arrowLeft = _a[0], setArrowLeft = _a[1];
    var _b = React.useState(true), arrowRight = _b[0], setArrowRight = _b[1];
    var _c = React.useState(), calloutOffset = _c[0], setCalloutOffset = _c[1];
    var _d = React.useState(0), translate = _d[0], setTranslate = _d[1];
    var _e = React.useState(), tabFlexWith = _e[0], setTabFlexWith = _e[1];
    var _f = React.useState(0), visibleTabs = _f[0], setVisibleTabs = _f[1];
    var _g = React.useState(0), firstIndexInView = _g[0], setFirstIndexInView = _g[1];
    var _h = React.useState(1), currentEvent = _h[0], setCurrentEvent = _h[1];
    var _j = React.useState(), eventsToShow = _j[0], setEventsToShow = _j[1];
    var _k = React.useState(), eventsOnTrack = _k[0], setEventsOnTrack = _k[1];
    var _l = React.useState([0, 0, 0]), eventsPositions = _l[0], setEventsPositions = _l[1];
    var _m = React.useState(0), eventsTranslate = _m[0], setEventsTranslate = _m[1];
    var _o = React.useState(1), pivotEvent = _o[0], setPivotEvent = _o[1];
    var trackWrapRef = React.useRef(null);
    var trackRef = React.useRef(null);
    var arrowLeftRef = React.useRef(null);
    var tabWith = tabFlexWith ? "".concat(tabFlexWith, "%") : "".concat(DEFAULT_EVENT_POINT_WITH, "px");
    var eventsData = props.eventsData, dateFormat = props.dateFormat, onActionClick = props.onActionClick;
    React.useEffect(function () {
        var _a;
        var observerResize = canUseDOM && window.ResizeObserver && new window.ResizeObserver(repositionEvents);
        var trackList = trackRef.current;
        var cardWith = ((_a = trackWrapRef === null || trackWrapRef === void 0 ? void 0 : trackWrapRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0;
        if (observerResize && trackList) {
            observerResize.observe(trackList);
        }
        setYearsFlags();
        repositionEvents();
        setEventsPositions([cardWith, 0, -cardWith]);
        return function () {
            observerResize.disconnect();
        };
    }, []);
    React.useEffect(function () {
        var trackList = trackRef.current;
        var currentTab = trackList && trackList.children[currentEvent];
        if (currentTab) {
            var tabWidth = currentTab.offsetWidth;
            var leftArrow = !(translate >= 0);
            setArrowLeft(leftArrow);
            if (eventsOnTrack) {
                var rightArrow = eventsOnTrack.length * tabWidth > (visibleTabs * tabWidth) * (((translate * -1) + 100) / 100);
                setArrowRight(rightArrow);
            }
            if (((trackList === null || trackList === void 0 ? void 0 : trackList.offsetWidth) * -translate) / 100 >= trackList.children.length * tabWidth) {
                // TODO: on resize window reposition
                setYearsFlags();
                repositionEvents();
                setTranslate((((currentTab.offsetLeft - currentTab.offsetWidth) / (visibleTabs * currentTab.offsetWidth)) * 100) * -1);
            }
            positionCallout(currentTab);
        }
    }, [visibleTabs, tabFlexWith, currentEvent]);
    var setYearsFlags = function () {
        var trackData = addYearsFlags(eventsData);
        setEventsOnTrack(trackData);
        setEventsToShow([trackData[currentEvent - 1], trackData[currentEvent], trackData[currentEvent + 1]]);
    };
    var handlePrevClick = function () {
        var _a;
        var trackList = trackRef.current;
        if (trackList && eventsOnTrack) {
            var firstTabToUpdate = firstIndexInView - visibleTabs;
            var lastIndexInView = firstIndexInView - 1;
            var currentEventToUpdate = eventsOnTrack[lastIndexInView] && ((_a = eventsOnTrack[lastIndexInView]) === null || _a === void 0 ? void 0 : _a.yearFlag)
                ? lastIndexInView - 1
                : lastIndexInView;
            var translateUpdate = translate + 100 > 0 ? 0 : translate + 100;
            updatePage(false, currentEventToUpdate);
            repositionEvents();
            setFirstIndexInView(firstTabToUpdate);
            setTranslate(translateUpdate);
            setCurrentEvent(currentEventToUpdate);
        }
    };
    var handleNextClick = function () {
        var trackList = trackRef.current;
        if (trackList && eventsOnTrack) {
            var firstTabToUpdate = firstIndexInView + visibleTabs;
            var currentEventToUpdate = eventsOnTrack[firstTabToUpdate] && eventsOnTrack[firstTabToUpdate].yearFlag
                ? firstTabToUpdate + 1
                : firstTabToUpdate;
            var translateUpdate = translate - 100;
            updatePage(true, currentEventToUpdate);
            repositionEvents();
            setFirstIndexInView(firstTabToUpdate);
            setTranslate(translateUpdate);
            setCurrentEvent(currentEventToUpdate);
        }
    };
    var updatePage = function (forward, current) {
        var _a;
        if (eventsToShow && eventsOnTrack) {
            var pageToUpdateIndex_1 = getPivotIndex(forward, pivotEvent);
            var eventCardsArray_1 = Object.assign([], eventsToShow, (_a = {}, _a[pageToUpdateIndex_1] = eventsOnTrack[current], _a));
            setEventsToShow(eventCardsArray_1);
            setPivotEvent(pageToUpdateIndex_1);
            setEventsTranslate(forward ? -100 : 100);
            setTimeout(function () {
                var _a, _b;
                var _c;
                var cardWith = (_c = trackWrapRef.current) === null || _c === void 0 ? void 0 : _c.offsetWidth;
                var repositionArray = Object.assign([], eventsPositions, (_a = {},
                    _a[pageToUpdateIndex_1] = 0,
                    _a[getPivotIndex(true, pageToUpdateIndex_1)] = cardWith,
                    _a[getPivotIndex(false, pageToUpdateIndex_1)] = cardWith && -cardWith,
                    _a));
                var clearEventsArray = Object.assign([], eventCardsArray_1, (_b = {},
                    _b[getPivotIndex(true, pageToUpdateIndex_1)] = {},
                    _b[getPivotIndex(false, pageToUpdateIndex_1)] = {},
                    _b));
                setEventsToShow(clearEventsArray);
                setEventsPositions(repositionArray);
                setEventsTranslate(0);
            }, props.transitionDuration || EVENT_CARD_TRANSITION_DURATION);
        }
    };
    var getPivotIndex = function (forward, index) {
        var pageIndex = forward ? index + 1 : index - 1;
        if (eventsToShow) {
            var validIndex = pageIndex < 0
                ? eventsToShow.length - 1
                : pageIndex % eventsToShow.length;
            return validIndex;
        }
        return 0;
    };
    var positionCallout = function (element) {
        var _a;
        var offsetToSet = ((currentEvent - firstIndexInView) * element.offsetWidth) +
            (element.offsetWidth / 2) +
            (((_a = arrowLeftRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0);
        setCalloutOffset(offsetToSet);
    };
    var onPointClick = function (index, event) {
        event.preventDefault();
        if (index > currentEvent) {
            updatePage(true, index);
        }
        else if (index < currentEvent) {
            updatePage(false, index);
        }
        setCurrentEvent(index);
    };
    var repositionEvents = React.useCallback(function () {
        var trackList = trackRef.current;
        var currentTab = trackList && trackList.children[currentEvent];
        if (trackList instanceof HTMLElement && currentTab) {
            var visibleTabsCount = Math.round(trackList.offsetWidth / DEFAULT_EVENT_POINT_WITH);
            positionCallout(currentTab);
            setTabFlexWith(100 / visibleTabsCount);
            setVisibleTabs(visibleTabsCount);
        }
    }, []);
    var eventCardAnimationStyle = function () { return ({
        transitionDuration: "".concat(EVENT_CARD_TRANSITION_DURATION, "ms")
    }); };
    var eventCardReorderStyle = function (translation) { return ({
        transform: "translateX(".concat(translation, "%)"), transformOrigin: 'left top'
    }); };
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "k-timeline-track-wrap", ref: trackWrapRef },
            React.createElement("a", { ref: arrowLeftRef, "aria-hidden": "true", onClick: function () { return arrowLeft && handlePrevClick(); }, className: classNames('k-timeline-arrow', 'k-timeline-arrow-left', 'k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button', { 'k-disabled': !arrowLeft }) },
                React.createElement(SvgIcon, { icon: caretAltLeftIcon })),
            React.createElement("a", { "aria-hidden": "true", onClick: function () { return arrowRight && handleNextClick(); }, className: classNames('k-timeline-arrow', 'k-timeline-arrow-right', 'k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button', { 'k-disabled': !arrowRight }) },
                React.createElement(SvgIcon, { icon: caretAltRightIcon })),
            React.createElement("div", { className: "k-timeline-track" },
                React.createElement("ul", { ref: trackRef, className: "k-timeline-scrollable-wrap", role: "tablist", tabIndex: 0, style: { transform: "translateX(".concat(translate, "%)") } }, eventsOnTrack && eventsOnTrack.map(function (event, index) { return (event.yearFlag
                    ? (React.createElement("li", { role: "none", className: "k-timeline-track-item k-timeline-flag-wrap", style: { flex: "1 0 ".concat(tabWith) }, key: index },
                        React.createElement("span", { className: "k-timeline-flag" }, event.yearFlag)))
                    : (React.createElement("li", { role: "tab", className: classNames('k-timeline-track-item', { 'k-focus': index === currentEvent }), "aria-selected": index === currentEvent, style: { flex: "1 0 ".concat(tabWith) }, key: index },
                        React.createElement("div", { className: "k-timeline-date-wrap" },
                            React.createElement("span", { className: "k-timeline-date" }, intl.formatDate(event.date, dateFormat))),
                        React.createElement("span", { onClick: function (e) { return onPointClick(index, e); }, className: "k-timeline-circle" })))); })))),
        React.createElement("div", { className: "k-timeline-events-list" },
            React.createElement("ul", { className: "k-timeline-scrollable-wrap", style: eventsTranslate === 0
                    ? __assign({}, eventCardReorderStyle(eventsTranslate)) : __assign(__assign({}, eventCardReorderStyle(eventsTranslate)), eventCardAnimationStyle()) }, eventsToShow && eventsToShow.map(function (eventData, index) {
                return (React.createElement("li", { key: index, className: "k-timeline-event", style: { transform: "translate3d(".concat(eventsPositions[index], "px, 0px, 0px)") } }, eventData && React.createElement(TimelineCard, { tabindex: eventsPositions[index] === 0 ? 0 : -1, eventData: eventData, onActionClick: onActionClick, horizontal: true, collapsible: false, calloutStyle: { left: "".concat(calloutOffset, "px") } })));
            })))));
};
TimelineHorizontal.propTypes = {
    onActionClick: PropTypes.func
};
